#!/bin/sh

print_usage() {
    echo 'Usage: mailnotify [OPTION]... [DIR_TO_WATCH]

    Options:
      -e, --exclude-dir       Directory to exclude from watching. Mail files
                              created in this directory will not trigger a
                              notification. May be applied multiple times for
                              multiple directories.
    '
}

datetime_formatted() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')]"
}

error_msg() {
    msg "Error: $1" >&2
}

msg() {
    echo "$(datetime_formatted) $1"
}

# Extract option arguments
while [ $# -gt 0 ]; do
    case $1 in
        -e|--exclude-dir)
            EXCLUDE_INPUT="$EXCLUDE_INPUT $(printf "'%s'" "$2")"
            shift
        ;;

        -h|--help)
            print_usage
            exit
        ;;

        *)
            break
    esac
    [ $# -gt 0 ] && shift # Shift only if more parameters exist
done

if ! [ $# -eq 1 ] || echo "$1" | grep -q '^-'; then
    # Error if there is not exactly one parameter or if it starts with "-"
    echo "$0: Error: malformed arguments." >&2; echo
    print_usage
    exit 1
fi

CACHE_PATH="$HOME/.cache/mailnotify"
mkdir -p "$CACHE_PATH" 

LISTEN_DIR="$1"

msg "Listening for new email files in $LISTEN_DIR"

if ! test -z "$EXCLUDE_INPUT" ; then
    msg "Excluding subdirectories:$(printf "\n $EXCLUDE_INPUT\n")"
    EXCLUDE_INPUT="$(echo "$EXCLUDE_INPUT" | # escape typical characters 
        sed 's/\(\[\|\]\|(\|)\|\\\|\^\|\$\|\.\||\|\?\|*\|+\)/\\\1/g')"

    # Store given excludeable dir names in positional parameter array
    eval "set -- "$EXCLUDE_INPUT""

    # Format exclude pattern out of given excludeable dir names
    EXCLUDE="$(printf '%s)|(' "$@")"
    EXCLUDE="$(echo "${EXCLUDE%?}" |
        sed 's/^/(/g; s/\()|\)/\/.*\1/g')"
fi

EXCLUDE_ROOT="$(echo "$LISTEN_DIR" |
    awk -F '/' '{ gsub("\\.", "\\.", $3); print $3 }')"

inotifywait -mrq -e create \
    --exclude "/$EXCLUDE_ROOT/.*/($EXCLUDE(\.|new|cur)|(.*,S(\w|$)))" \
    --format '%w%f %f' "$LISTEN_DIR" | while read LINE FILE
do
    msg "$LINE"

    # Check in both `tmp` and `new` to work around race condition.
    TMP_PATH="$CACHE_PATH/$FILE"
    cp "$LINE" "$TMP_PATH" 2> /dev/null || {
        msg "Mail file was already moved out of 'tmp' dir. Trying 'new' dir."
        cp "$(echo "$LINE" | sed 's/tmp/new/g')" "$TMP_PATH"; 
    }

    test -f "$TMP_PATH" || {
        error_msg "Lost track of file unexpectedly: $TMP_PATH"
        continue;
    }

    parsemail "$TMP_PATH" |
        while IFS="$(printf '\t')" read -r TO FROM SUBJECT PRIORITY; do
            notify-newmail "$TO" "$FROM" "$SUBJECT" "${PRIORITY:-3}"
        done

    rm $TMP_PATH
done

